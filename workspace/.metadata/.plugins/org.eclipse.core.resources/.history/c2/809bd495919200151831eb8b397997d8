import java.sql.*;
import java.io.*;
public class OutilsJDBC {
	public static Connection openConnection (String url) {
		Connection co=null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			co=
					DriverManager.getConnection(url);
		}
		catch (ClassNotFoundException e){
			System.out.println("il manque le driver oracle");
			System.exit(1);
		}
		catch (SQLException e) {
			System.out.println("impossible de se connecter à l'url : "+url);
			System.
			exit(1);
		}
		return co;
	}
	public static ResultSet exec1Requete (String requete, Connection co, int type){
		ResultSet res=null;
		try {
			Statement st;
			if (type==0){
				st=co.createStatement();}
			else {
				st=co.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, 
						ResultSet.CONCUR_READ_ONLY);
			};
			res= st.executeQuery(requete);
		}
		catch (SQLException e){
			System.out.println("Problème lors de l'exécution de la requete : "+requete);
		};
		return res;
	}
	public static void closeConnection(Connection co){
		try {
			co.close();
			System.out.println("Connexion fermée!");
		}
		catch (SQLException e) {
			System.out.println("Impossible de fermer la connexion");
		}
	}
	
	public static String chaine() {
		String valeur;
		try {
			BufferedReader entree= new BufferedReader(new InputStreamReader(System.in));
			valeur = entree.readLine();
			return (valeur);
		}
		catch (IOException e){
			System.out.println("Probleme de lecture");
			return(" ");
		}
	}
	public static int entier (){
		String valeur;
		try {
			BufferedReader entree= new BufferedReader(new InputStreamReader(System.in));
			valeur = entree.readLine();
			int ent=Integer.parseInt(valeur,10);
			return ent;
		}
		catch (IOException e){
			System.out.println("Probleme de lecture");
			return(0);
		}
	}
	
	public static void main(String[] args){
		String url="jdbc:oracle:thin:pstraeb/OZuMDGA6@r2d2.etu.iut-orsay.fr:1521:etudom";
		Connection co=OutilsJDBC.openConnection(url);
		System.out.println("connexion ouverte");
		System.out.println("\n");
		//traitement et requete OutilsJDBC.closeConnection(co);

		//Question 1
		System.out.println("Question 1");
		
		Statement stmt;
		String requete =  "SELECT * FROM ens2004.film";
		
		try {
			stmt = co.createStatement ( );
			ResultSet rs = stmt.executeQuery(requete);
			ResultSetMetaData rsmd = rs.getMetaData ( );
			int nbColones = rsmd.getColumnCount ( );
			System.out.println("Name    Null?     Type");
			for (int i=1; i<=nbColones; i++){
				int nul = rsmd.isNullable(i);
				String name = rsmd.getColumnName(i);
				String type = rsmd.getColumnTypeName(i);
				int length = rsmd.getColumnDisplaySize(i);
				if(nul==0) System.out.println(name + "    NOT NULL   " + type+"("+length+")");
				else System.out.println(name + "       " + type+"("+length+")");
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		System.out.println("\n");
		
		//Question 2
		System.out.println("Quesion 2");
		
		System.out.println("Veuillez entrer un nom d'acteur : ");
		String acteur = chaine();
		
		String reqAct = "SELECT indiv.numindividu, indiv.nomindividu, indiv.prenomindividu FROM ens2004.acteur act, ens2004.individu indiv WHERE indiv.numindividu=act.numindividu AND indiv.NomIndividu= '" + acteur + "'";
		String reqFilm = "SELECT film.numFilm, film.titre FROM ens2004.film film, ens2004.acteur act, ens2004.individu indiv WHERE film.numFilm=act.numFilm AND indiv.numindividu=act.numindividu AND indiv.nomindividu='? AND indiv.prenomIndividu=?";
			
		try {
			PreparedStatement psm = co.prepareStatement(reqFilm);
			ResultSet rsAct=exec1Requete(reqAct, co, 1);
			while(rsAct.next()){
				psm.setString(1, acteur);
				ResultSet rsFilm=psm.executeQuery();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//Les questions suivantes n'ont pas pu être testées
		
		//Question 3
		System.out.println("Question 3");
		System.out.println("Saisir numéro d'acteur : ");
		int numAct = entier();
		try{
			String nbreFilms1 = "create or replace FUNCTION nbreFilms1 (nbActeur IN INTEGER) RETURN number IS nbFilms number; cursor c1 is SELECT COUNT(distinct F.titre) INTO nbFilms FROM ens2004.Film F, ens2004.Acteur A, ens2004.individu i WHERE i.numIndividu = nbActeur	AND i.numIndividu=a.numIndividu AND F.numFilm=A.numFilm; BEGIN open c1;	fetch c1 into nbFilms; RETURN nbFilms; END;";
			CallableStatement cst = co.prepareCall(nbreFilms1);
			cst.setInt (2,numAct);
			cst.registerOutParameter (1,java.sql.Types.INTEGER);
			cst.execute();
			int nbFilm = cst.getInt(1);
			cst.close();
			System.out.println("L'acteur numéro " + numAct + " a joué dans " + nbFilm + " film(s)." );
			} catch (SQLException e) {
			System.out.println("Erreur CallableStatement nbreFilms1.");
		}
		System.out.println("\n");
		
		//Question 4
		System.out.println("Question 4");
		System.out.println("Saisir nom de réalisateur : ");
		String sonNom = chaine();
		try {
			Statement statement = co.createStatement();
			String nbreFilms2="create or replace FUNCTION nbreFilms2 (nomReal IN VARCHAR2) RETURN number IS	nbFilms number;	cursor c1 is SELECT COUNT(distinct F.titre) INTO nbFilms FROM ens2004.Film F, ens2004.individu i WHERE i.nomIndividu = nomReal AND i.numIndividu=f.realisateur; BEGIN open c1; fetch c1 into nbFilms; RETURN nbFilms; END;";
			CallableStatement cst = co.prepareCall(nbreFilms2);
			cst.setString (2,sonNom);
			cst.registerOutParameter (1,java.sql.Types.INTEGER);
			cst.execute();
			int nbFilm2 = cst.getInt(1);
			cst.close();
			System.out.println("Le réalisateur " + sonNom + " a réalisé " + nbFilm2 + " film(s)." );
		} catch (SQLException e) {
			System.out.println("Erreur CallableStatement nbreFilms2.");
		}

		System.out.println("\n");	
		
		//Question 5
		System.out.println("Question 5");

		System.out.println("Saisir nom acteur : ");
		String nomAct5 = chaine();
		try {
			String sql="CREATE OR REPLACE PROCEDURE unTitre ( nomActeur IN ens2004.Individu.NomIndividu%type, titre OUT ens2004.Film.titre%type, prenomActeur OUT ens2004.Individu.PrenomIndividu%type) IS cursor c1 is SELECT f.titre FROM ens2004.individu i, ens2004.film f, ens2004.acteur a WHERE UPPER(i.nomIndividu)=UPPER(nomActeur) AND i.numIndividu=a.numIndividu AND a.numFilm=f.numFilm AND ROWNUM = 1; cursor c2 is  SELECT i.prenomindividu FROM ens2004.individu i, ens2004.film f, ens2004.acteur a WHERE UPPER(i.nomIndividu)=UPPER(nomActeur) AND i.numIndividu=a.numIndividu AND a.numFilm=f.numFilm AND ROWNUM = 1; BEGIN open c1; open c2; fetch c1 into titre; fetch c2 into prenomActeur; END;";
			CallableStatement cst = co.prepareCall(sql);
			cst.setString (1,nomAct5);
			cst.registerOutParameter (2,java.sql.Types.VARCHAR);
			cst.registerOutParameter (3,java.sql.Types.VARCHAR);
			cst.execute();
			String titre = cst.getString(2);
			String prenom = cst.getString(3);
			cst.close();
			System.out.println("L'acteur " + nomAct5 + " a pour prenom " + prenom + " et a joue dans \"" + titre + "\"." );
		} catch (SQLException e) {
			System.out.println("Erreur CallableStatement unTitre.");
		}
		
		System.out.println("\n");
		
		//Questions 6 non réussie
		
		OutilsJDBC.closeConnection(co);
		// System.out.println("connexion fermee");
	}
};